use solana_program::{account_info::AccountInfo, msg, program_error::ProgramError, pubkey::Pubkey};

/// Used to load a `XAccounts` struct generated by solores
/// from the `AccountInfo` slice passed into a program's entrypoint
///
/// Example usage:
///
/// ```ignore
/// pub fn process_instruction(
///     program_id: &Pubkey,
///     accounts: &[AccountInfo],
///     instruction_data: &[u8],
/// ) -> ProgramResult {
///     let accounts: TransferAccounts = load_accounts(accounts)?;
///     ...
/// }
/// ```
pub fn load_accounts<'a, 'info, A, const LEN: usize>(
    accounts_slice: &'a [AccountInfo<'info>],
) -> Result<A, ProgramError>
where
    &'a [AccountInfo<'info>; LEN]: Into<A>,
{
    let subslice = accounts_slice
        .get(..LEN)
        .ok_or(ProgramError::NotEnoughAccountKeys)?;
    let accounts_arr: &[AccountInfo; LEN] = subslice.try_into().unwrap();
    Ok(accounts_arr.into())
}

/// For use with `X_verify_account_keys()` function generated by solores
///
/// Returns `ProgramError::InvalidArgument`
///
/// Example usage:
///
/// ```ignore
///     let actual: TransferAccounts = ...;
///     let expected: TransferKeys = ...;
///
///     transfer_verify_account_keys(actual, expected).map_err(log_and_return_wrong_acc_err)?;
/// ```
pub fn log_and_return_wrong_acc_err((actual, expected): (Pubkey, Pubkey)) -> ProgramError {
    msg!("Wrong account. Expected: {}, Got: {}", expected, actual);
    ProgramError::InvalidArgument
}

/// For use with `X_verify_account_privileges()` function generated by solores
///
/// Returns the args.1 ProgramError
///
/// Example usage:
///
/// ```ignore
///     let actual: TransferAccounts = ...;
///
///     transfer_verify_account_privileges(actual, expected).map_err(log_and_return_acc_privilege_err)?;
/// ```
pub fn log_and_return_acc_privilege_err((info, err): (&AccountInfo, ProgramError)) -> ProgramError {
    msg!("Writable/signer privilege escalated for: {}", info.key);
    err
}
